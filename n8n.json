{
  "nodes": [
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Listen for incoming events').first().json.message.from.id }}"
      },
      "id": "a6060dc1-6a9d-4cff-8d3f-1a52ca6b283f",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        1760,
        576
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "56aae12f-d65f-48b9-89f2-c84a96837361",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        1632,
        576
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "0e91331f-d0cc-4f04-993d-90ed580a31eb",
      "name": "Listen for incoming events",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        832,
        256
      ],
      "webhookId": "322dce18-f93e-4f86-b9b1-3305519b7834",
      "typeVersion": 1
    },
    {
      "parameters": {
        "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "Markdown"
        }
      },
      "id": "f1eebf12-6cf7-487b-b091-9eb77cba0c43",
      "name": "Telegram",
      "type": "n8n-nodes-base.telegram",
      "position": [
        2272,
        256
      ],
      "webhookId": "e699405e-8e52-4d38-a06b-1fa8edf050bd",
      "typeVersion": 1.1,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "a0bf9719-4272-46f6-ab3b-eda6f7b44fd8",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.message.text }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "67d235a5-6fe3-4f1f-9f4d-6dd2d96505b6",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        1200,
        256
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "00cfc81e-7d13-4629-8c91-c313ac96c516",
      "name": "Speech to Text",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        1616,
        256
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "text",
              "stringValue": "={{ $json?.message?.text || \"\" }}"
            }
          ]
        },
        "options": {}
      },
      "id": "0a00de9a-9dcb-4d2c-9393-4ecd70e3a48c",
      "name": "Voice or Text",
      "type": "n8n-nodes-base.set",
      "position": [
        1040,
        256
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Listen for incoming events').item.json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "id": "7a31315b-146b-46f8-9268-8a0006ff0b3c",
      "name": "Get Voice File",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1376,
        256
      ],
      "webhookId": "24273e7e-6133-415e-8627-a9d6dc0f107c",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "=You are a Telegram SQL Query Assistant integrated into an n8n workflow.\n\n1. Understand the userâ€™s intent and generate a corresponding SQL query for a PostgreSQL database.\n   - The SQL must be valid PostgreSQL syntax.\n   - Prefer SELECT queries (read-only).\n   - Always include a LIMIT clause when appropriate.\n   - Never perform DROP, DELETE, or UPDATE operations unless explicitly authorized.\n\nStyle:\n- Replies should be short, friendly, and professional.\n- If the query fails or is unclear, explain why and suggest a corrected version.\n- Always sanitize inputs and avoid executing unsafe SQL.\n\nExpected output:\nRun the compiled SQL command against the postgres database"
        }
      },
      "id": "5d2b9324-4706-41b0-b392-3ae43998079c",
      "name": "Llama AI Assistant ðŸ¦™",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1776,
        256
      ],
      "typeVersion": 1.6,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "content": "## Process Telegram Request\n",
        "height": 278.75,
        "width": 496.25,
        "color": 5
      },
      "id": "cbf51302-c956-4b06-88d2-9cfbd16936fe",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1008,
        160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_statement') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1888,
        576
      ],
      "id": "20b377b4-8c79-4113-9bb6-4796acb98650",
      "name": "Execute a SQL query in Postgres"
    }
  ],
  "connections": {
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "Llama AI Assistant ðŸ¦™",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Llama AI Assistant ðŸ¦™",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Listen for incoming events": {
      "main": [
        [
          {
            "node": "Voice or Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Get Voice File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Llama AI Assistant ðŸ¦™",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Speech to Text": {
      "main": [
        [
          {
            "node": "Llama AI Assistant ðŸ¦™",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Voice or Text": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Voice File": {
      "main": [
        [
          {
            "node": "Speech to Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Llama AI Assistant ðŸ¦™": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query in Postgres": {
      "ai_tool": [
        [
          {
            "node": "Llama AI Assistant ðŸ¦™",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "e9aebf56e720e9549133cb54ef995278fca7be5c99dcfbf8dcd1cc9b1ba69451"
  }
}